import UserModel from '../models/User.js';
import {
    ChatCompletionRequestMessage,
    ChatCompletionResponseMessage,
    Configuration,
    OpenAIApi,
} from 'openai';
import { telegramBot } from '../server.js';
import { answerTimer, startTimer } from '../middleware/botConnect.js';
import { RequestBody } from '../types/index.js';
import { Request, Response } from 'express';

const configuration = new Configuration({
    apiKey: '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',
});
const openai = new OpenAIApi(configuration);

export const startBot = async (req: RequestBody, res: Response) => {
    const userId = req.body.userId;
    try {
        const bot = req.body.bot;
        const systemData = req.body.system;

        const filter = { userId: userId };
        const update = {
            $set: { 'chatSession.activeBot': bot },
            $push: { 'chatSession.session': { role: 'system', content: systemData } },
        };
        const options = { new: true };

        const user = await UserModel.findOneAndUpdate(filter, update, options);

        if (user) {
            telegramBot.sendMessage(userId, '–≠–∫—Å–ø–µ—Ä—Ç —É–∂–µ —Å–ø–µ—à–∏—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏...');

            const response = await openai.createChatCompletion({
                model: 'gpt-3.5-turbo',
                messages: user.chatSession.session as ChatCompletionRequestMessage[],
                max_tokens: 200,
            });
            //const message = response.data.choices[0].text.trim();
            const chatMessage = response.data.choices[0].message as ChatCompletionResponseMessage;
            await UserModel.findOneAndUpdate(
                filter,
                { $push: { 'chatSession.session': chatMessage } },
                options,
            );
            const button = {
                reply_markup: {
                    inline_keyboard: [[{ text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', callback_data: 'end_session' }]],
                },
            };

            telegramBot.sendMessage(userId, chatMessage.content, button);
        }

        startTimer(userId)
            .then((answer) => {
                askBot(userId, answer as string);
            })
            .catch(async (error) => {
                if (error.message === 'Close') {
                    stopBot(error.id);
                } else {
                    const filter = { userId: error.id };
                    const update = { $set: { chatSession: { activeBot: '', session: [] } } };
                    await UserModel.findOneAndUpdate(filter, update, options);
                }
            });
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞');
        telegramBot.sendMessage(
            userId,
            '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞. –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –Ω–∞ —Ä–∞—Å—Ö–≤–∞—Ç. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑ üòå',
        );
    }
};

export const askBot = async (userId: string, text: string, retries = 2) => {
    try {
        const filter = { userId: userId };
        const options = { new: true };

        const user = await UserModel.findOne(filter);

        if (user) {
            telegramBot.sendChatAction(userId, 'typing');

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ

            if (user.chatSession.session.length > 12) {
                console.log('–£–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π');
                user.chatSession.session.splice(1, 2);
                user.chatSession.session.push({ role: 'user', content: text });
                await UserModel.findOneAndUpdate(
                    filter,
                    { $set: { 'chatSession.session': user.chatSession.session } },
                    options,
                );
            } else {
                user.chatSession.session.push({ role: 'user', content: text });
                await UserModel.findOneAndUpdate(
                    filter,
                    { $set: { 'chatSession.session': user.chatSession.session } },
                    options,
                );
            }

            const response = await openai.createChatCompletion({
                model: 'gpt-3.5-turbo',
                messages: user.chatSession.session as ChatCompletionRequestMessage[],
            });

            const chatMessage = response.data.choices[0].message as ChatCompletionResponseMessage;

            await UserModel.findOneAndUpdate(
                filter,
                { $push: { 'chatSession.session': chatMessage } },
                options,
            );

            const button = {
                reply_markup: {
                    inline_keyboard: [[{ text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', callback_data: 'end_session' }]],
                },
            };
            telegramBot.sendMessage(userId, chatMessage.content, button);
        }

        answerTimer(userId)
            .then((answer) => {
                askBot(userId, answer as string);
            })
            .catch(async (error) => {
                if (error.message === 'Close') {
                    stopBot(error.id);
                } else {
                    const update = { $set: { chatSession: { activeBot: '', session: [] } } };
                    await UserModel.findOneAndUpdate(filter, update, options);
                }
            });
    } catch (error) {
        console.log(error);
        if (retries > 0) {
            console.log(`–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (${retries} –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)`);
            await askBot(userId, text, retries - 1);
        } else {
            telegramBot.sendMessage(
                userId,
                '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –µ—â–µ —Ä–∞–∑ üòå',
            );
        }
    }
};

export const stopBot = async (userId: string) => {
    try {
        const filter = { userId: userId };
        const update = { $set: { chatSession: { activeBot: '', session: [] } } };
        const options = { new: true };

        await UserModel.findOneAndUpdate(filter, update, options);

        telegramBot.sendMessage(userId, '–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø—Ä–∏—è—Ç–Ω—É—é –±–µ—Å–µ–¥—É) –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á. üëã');
    } catch (error) {
        console.log(error);
    }
};
